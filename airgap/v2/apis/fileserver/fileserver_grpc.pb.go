// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fileserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServerClient is the client API for FileServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileServer_UploadFileClient, error)
	ListFileMetadata(ctx context.Context, in *ListFileMetadataRequest, opts ...grpc.CallOption) (FileServer_ListFileMetadataClient, error)
	GetFileMetadata(ctx context.Context, in *GetFileMetadataRequest, opts ...grpc.CallOption) (*GetFileMetadataResponse, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FileServer_DownloadFileClient, error)
	UpdateFileMetadata(ctx context.Context, in *UpdateFileMetadataRequest, opts ...grpc.CallOption) (*UpdateFileMetadataResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	CleanTombstones(ctx context.Context, in *CleanTombstonesRequest, opts ...grpc.CallOption) (*CleanTombstonesResponse, error)
}

type fileServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerClient(cc grpc.ClientConnInterface) FileServerClient {
	return &fileServerClient{cc}
}

func (c *fileServerClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileServer_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServer_ServiceDesc.Streams[0], "/fileserver.v1.FileServer/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerUploadFileClient{stream}
	return x, nil
}

type FileServer_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type fileServerUploadFileClient struct {
	grpc.ClientStream
}

func (x *fileServerUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerClient) ListFileMetadata(ctx context.Context, in *ListFileMetadataRequest, opts ...grpc.CallOption) (FileServer_ListFileMetadataClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServer_ServiceDesc.Streams[1], "/fileserver.v1.FileServer/ListFileMetadata", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerListFileMetadataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileServer_ListFileMetadataClient interface {
	Recv() (*ListFileMetadataResponse, error)
	grpc.ClientStream
}

type fileServerListFileMetadataClient struct {
	grpc.ClientStream
}

func (x *fileServerListFileMetadataClient) Recv() (*ListFileMetadataResponse, error) {
	m := new(ListFileMetadataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerClient) GetFileMetadata(ctx context.Context, in *GetFileMetadataRequest, opts ...grpc.CallOption) (*GetFileMetadataResponse, error) {
	out := new(GetFileMetadataResponse)
	err := c.cc.Invoke(ctx, "/fileserver.v1.FileServer/GetFileMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServerClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FileServer_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServer_ServiceDesc.Streams[2], "/fileserver.v1.FileServer/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileServer_DownloadFileClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type fileServerDownloadFileClient struct {
	grpc.ClientStream
}

func (x *fileServerDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerClient) UpdateFileMetadata(ctx context.Context, in *UpdateFileMetadataRequest, opts ...grpc.CallOption) (*UpdateFileMetadataResponse, error) {
	out := new(UpdateFileMetadataResponse)
	err := c.cc.Invoke(ctx, "/fileserver.v1.FileServer/UpdateFileMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServerClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/fileserver.v1.FileServer/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServerClient) CleanTombstones(ctx context.Context, in *CleanTombstonesRequest, opts ...grpc.CallOption) (*CleanTombstonesResponse, error) {
	out := new(CleanTombstonesResponse)
	err := c.cc.Invoke(ctx, "/fileserver.v1.FileServer/CleanTombstones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerServer is the server API for FileServer service.
// All implementations must embed UnimplementedFileServerServer
// for forward compatibility
type FileServerServer interface {
	UploadFile(FileServer_UploadFileServer) error
	ListFileMetadata(*ListFileMetadataRequest, FileServer_ListFileMetadataServer) error
	GetFileMetadata(context.Context, *GetFileMetadataRequest) (*GetFileMetadataResponse, error)
	DownloadFile(*DownloadFileRequest, FileServer_DownloadFileServer) error
	UpdateFileMetadata(context.Context, *UpdateFileMetadataRequest) (*UpdateFileMetadataResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	CleanTombstones(context.Context, *CleanTombstonesRequest) (*CleanTombstonesResponse, error)
	mustEmbedUnimplementedFileServerServer()
}

// UnimplementedFileServerServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerServer struct {
}

func (UnimplementedFileServerServer) UploadFile(FileServer_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileServerServer) ListFileMetadata(*ListFileMetadataRequest, FileServer_ListFileMetadataServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFileMetadata not implemented")
}
func (UnimplementedFileServerServer) GetFileMetadata(context.Context, *GetFileMetadataRequest) (*GetFileMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileMetadata not implemented")
}
func (UnimplementedFileServerServer) DownloadFile(*DownloadFileRequest, FileServer_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileServerServer) UpdateFileMetadata(context.Context, *UpdateFileMetadataRequest) (*UpdateFileMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileMetadata not implemented")
}
func (UnimplementedFileServerServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileServerServer) CleanTombstones(context.Context, *CleanTombstonesRequest) (*CleanTombstonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanTombstones not implemented")
}
func (UnimplementedFileServerServer) mustEmbedUnimplementedFileServerServer() {}

// UnsafeFileServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerServer will
// result in compilation errors.
type UnsafeFileServerServer interface {
	mustEmbedUnimplementedFileServerServer()
}

func RegisterFileServerServer(s grpc.ServiceRegistrar, srv FileServerServer) {
	s.RegisterService(&FileServer_ServiceDesc, srv)
}

func _FileServer_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerServer).UploadFile(&fileServerUploadFileServer{stream})
}

type FileServer_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type fileServerUploadFileServer struct {
	grpc.ServerStream
}

func (x *fileServerUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServer_ListFileMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListFileMetadataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServerServer).ListFileMetadata(m, &fileServerListFileMetadataServer{stream})
}

type FileServer_ListFileMetadataServer interface {
	Send(*ListFileMetadataResponse) error
	grpc.ServerStream
}

type fileServerListFileMetadataServer struct {
	grpc.ServerStream
}

func (x *fileServerListFileMetadataServer) Send(m *ListFileMetadataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileServer_GetFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerServer).GetFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileserver.v1.FileServer/GetFileMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerServer).GetFileMetadata(ctx, req.(*GetFileMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileServer_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServerServer).DownloadFile(m, &fileServerDownloadFileServer{stream})
}

type FileServer_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type fileServerDownloadFileServer struct {
	grpc.ServerStream
}

func (x *fileServerDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileServer_UpdateFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerServer).UpdateFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileserver.v1.FileServer/UpdateFileMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerServer).UpdateFileMetadata(ctx, req.(*UpdateFileMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileServer_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileserver.v1.FileServer/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileServer_CleanTombstones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanTombstonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerServer).CleanTombstones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileserver.v1.FileServer/CleanTombstones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerServer).CleanTombstones(ctx, req.(*CleanTombstonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServer_ServiceDesc is the grpc.ServiceDesc for FileServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileserver.v1.FileServer",
	HandlerType: (*FileServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileMetadata",
			Handler:    _FileServer_GetFileMetadata_Handler,
		},
		{
			MethodName: "UpdateFileMetadata",
			Handler:    _FileServer_UpdateFileMetadata_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileServer_DeleteFile_Handler,
		},
		{
			MethodName: "CleanTombstones",
			Handler:    _FileServer_CleanTombstones_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileServer_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListFileMetadata",
			Handler:       _FileServer_ListFileMetadata_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FileServer_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apis/fileserver/fileserver.proto",
}
