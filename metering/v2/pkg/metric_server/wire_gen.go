// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package metric_server

import (
	"github.com/prometheus-operator/prometheus-operator/pkg/client/versioned/typed/monitoring/v1"
	"github.com/redhat-marketplace/redhat-marketplace-operator/metering/v2/pkg/meter_definition"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/apis/marketplace/generated/clientset/versioned/typed/marketplace/v1beta1"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/client"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/managers"
	"github.com/redhat-marketplace/redhat-marketplace-operator/v2/pkg/utils/reconcileutils"
	"k8s.io/client-go/dynamic"
	"k8s.io/client-go/kubernetes"
	"sigs.k8s.io/controller-runtime/pkg/client/config"
)

import (
	_ "k8s.io/client-go/plugin/pkg/client/auth"
)

// Injectors from wire.go:

func NewServer(opts *Options) (*Service, error) {
	restConfig, err := config.GetConfig()
	if err != nil {
		return nil, err
	}
	restMapper, err := managers.NewDynamicRESTMapper(restConfig)
	if err != nil {
		return nil, err
	}
	scheme := provideScheme()
	clientOptions := getClientOptions()
	cache, err := managers.ProvideNewCache(restConfig, restMapper, scheme, clientOptions)
	if err != nil {
		return nil, err
	}
	clientClient, err := managers.ProvideCachedClient(restConfig, restMapper, scheme, cache, clientOptions)
	if err != nil {
		return nil, err
	}
	clientset, err := kubernetes.NewForConfig(restConfig)
	if err != nil {
		return nil, err
	}
	options := ConvertOptions(opts)
	registry := provideRegistry()
	logger := _wireLoggerValue
	clientCommandRunner := reconcileutils.NewClientCommand(clientClient, scheme, logger)
	context := provideContext()
	dynamicInterface, err := dynamic.NewForConfig(restConfig)
	if err != nil {
		return nil, err
	}
	dynamicClient := client.NewDynamicClient(dynamicInterface, restMapper)
	findOwnerHelper := client.NewFindOwnerHelper(dynamicClient)
	monitoringV1Client, err := v1.NewForConfig(restConfig)
	if err != nil {
		return nil, err
	}
	marketplaceV1beta1Client, err := v1beta1.NewForConfig(restConfig)
	if err != nil {
		return nil, err
	}
	meterDefinitionStoreBuilder := meter_definition.NewMeterDefinitionStoreBuilder(context, logger, clientCommandRunner, clientset, findOwnerHelper, monitoringV1Client, marketplaceV1beta1Client, scheme)
	statusProcessor := meter_definition.NewStatusProcessor(logger, clientCommandRunner)
	serviceProcessor := meter_definition.NewServiceProcessor(logger, clientCommandRunner)
	cacheIsIndexed, err := addIndex(context, cache)
	if err != nil {
		return nil, err
	}
	cacheIsStarted, err := managers.StartCache(context, cache, logger, cacheIsIndexed)
	if err != nil {
		return nil, err
	}
	service := &Service{
		k8sclient:        clientClient,
		k8sRestClient:    clientset,
		opts:             options,
		cache:            cache,
		metricsRegistry:  registry,
		cc:               clientCommandRunner,
		meterDefStore:    meterDefinitionStoreBuilder,
		statusProcessor:  statusProcessor,
		serviceProcessor: serviceProcessor,
		isCacheStarted:   cacheIsStarted,
	}
	return service, nil
}

var (
	_wireLoggerValue = log
)
